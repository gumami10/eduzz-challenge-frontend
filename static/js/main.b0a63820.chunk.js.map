{"version":3,"sources":["redux/reducers/moviesReducer.ts","redux/configureStore.ts","shared/atoms/Surprise/Surprise.tsx","shared/molecules/Form/Form.tsx","shared/organisms/Card/Card.tsx","shared/atoms/CardFacing/CardFacing.tsx","shared/molecules/MovieItem/MovieItem.tsx","shared/organisms/MoviesList/MoviesList.tsx","shared/pages/MainPage/MainPage.tsx","shared/pages/MoviesContent/MoviesContent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HTTP_GET_MOVIES_FETCHING","HTTP_GET_MOVIES_SUCCESS","HTTP_GET_MOVIES_FAIL","initialState","movies","errors","isLoading","getMovies","searchValue","dispatch","type","payload","fetch","method","then","response","json","results","catch","error","rootReducer","Redux","state","arguments","length","undefined","action","alert","console","log","Surprise","props","_useState","useState","_useState2","Object","slicedToArray","styles","setStyles","useEffect","opacity","react_default","a","createElement","style","className","onClick","getAction","description","Form","value","onChange","e","_this","setState","target","_this2","this","name","placeholder","Component","mapDispatchToProps","connectToRedux","ReactRedux","Card","molecules_Form_Form","CardFacing","title","showDetails","Fragment","releaseDate","MovieItem","_useState3","_useState4","setShowDetails","atoms_CardFacing_CardFacing","MoviesList","moviesReducer","surprise","textAlign","map","sample","MovieItem_MovieItem","key","episode_id","release_date","opening_crawl","MainPage","organisms_Card_Card","organisms_MoviesList_MoviesList","Styles","width","store","thunk","App","getSurprise","es","Surprise_Surprise","isSurprise","pages_MoviesContent_MoviesContent","isSearch","pages_MainPage_MainPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b0a63820.chunk.js","sourcesContent":["const HTTP_GET_MOVIES_FETCHING = \"HTTP_GET_MOVIES_FETCHING\";\nconst HTTP_GET_MOVIES_SUCCESS = \"HTTP_GET_MOVIES_SUCCESS\";\nconst HTTP_GET_MOVIES_FAIL = \"HTTP_GET_MOVIES_FAIL\";\n\ninterface IState  {\n    movies: any,\n    errors: boolean,\n    isLoading: boolean\n}\n\nconst initialState : IState = {\n    movies: [],\n    errors: false,\n    isLoading: false\n}\n\ninterface IAction {\n    type: string,\n    payload: any\n}\n\nexport default function reducer(state = initialState, action: IAction) {\n    switch (action.type) {\n        case HTTP_GET_MOVIES_FETCHING:\n            return {\n                movies: initialState.movies,\n                errors: state.errors,\n                isLoading: true\n            }\n        case HTTP_GET_MOVIES_SUCCESS:\n            return {\n                movies: action.payload,\n                errors: false,\n                isLoading: false\n            }\n        case HTTP_GET_MOVIES_FAIL:\n            alert(\"It looks like something went wrong, this site might not work correctly\");\n            console.log(action.payload)\n            return {\n                movies: initialState.movies,\n                errors: true,\n                isLoading: false\n            }\n        default:\n            return state;\n    }\n}\n\nexport const getMovies = (searchValue?: string) => {\n    if(searchValue !== \"\")\n        return (dispatch: any) => {\n            dispatch({\n                type: HTTP_GET_MOVIES_FETCHING,\n                payload: null\n            })\n            fetch(\"https://swapi.co/api/films/?search=\"+ searchValue, {\n                method: \"GET\"\n            })\n            .then(response => response.json())\n            .then(json => {\n                dispatch({ type: HTTP_GET_MOVIES_SUCCESS, payload: json.results })\n            })\n            .catch(error => {\n                return dispatch({\n                type: HTTP_GET_MOVIES_FAIL,\n                payload: error\n                })\n            })\n        }\n    else\n        return (dispatch: any) => {\n            dispatch({\n                type: HTTP_GET_MOVIES_FETCHING,\n                payload: null\n            })\n            fetch(\"https://swapi.co/api/films/\", {\n                method: \"GET\"\n            })\n            .then(response => response.json())\n            .then(json => dispatch({ type: HTTP_GET_MOVIES_SUCCESS, payload: json.results }))\n            .catch(error => {\n                return dispatch({\n                type: HTTP_GET_MOVIES_FAIL,\n                payload: error\n                })\n            })\n        }\n}\n\n","import * as Redux from 'redux';\nimport thunk from 'redux-thunk';\n\nimport moviesReducer from './reducers/moviesReducer';\n\nconst rootReducer = Redux.combineReducers({\n    movies: moviesReducer,\n})\n\nexport default function configureStore() {\n    return Redux.createStore(\n        rootReducer,\n        Redux.applyMiddleware(thunk)\n    )\n}\n","import './Surprise.css';\n\nimport React, { useEffect, useState } from 'react';\n\ninterface IProps {\n    getAction: () => void;\n    description: string;\n    className: string;\n    isSurprise: boolean;\n}\n\nexport default function Surprise(props: IProps) {\n    const [styles, setStyles] = useState({});\n    useEffect(() => {\n        setStyles({\n            opacity: 0.88\n        });\n    });\n\n    return (\n        <button\n            style={styles}\n            className={props.className}\n            onClick={props.getAction}\n        >\n            {props.description}\n        </button>\n    );\n}\n","import './Form.css';\n\nimport React, { Component } from 'react';\nimport * as ReactRedux from 'react-redux';\n\nimport { getMovies } from '../../../redux/reducers/moviesReducer';\n\ninterface IProps {\n    getMovies: (value: string) => void;\n}\n\ninterface IState {\n    value: string;\n}\n\nclass Form extends Component<IProps, IState> {\n    state = {\n        value: \"\"\n    };\n\n    onChange = (e: any) => {\n        this.setState({\n            value: e.target.value\n        });\n    };\n\n    render() {\n        return (\n            <form action=\"\" className=\"card-container\">\n                <input\n                    value={this.state.value}\n                    name=\"value\"\n                    type=\"text\"\n                    onChange={this.onChange}\n                    placeholder=\"Type the best Star Wars movie\"\n                    className=\"item\"\n                />\n                <button\n                    className=\"button -container\"\n                    type=\"button\"\n                    onClick={() => this.props.getMovies(this.state.value)}\n                >\n                    Show me some action!\n                </button>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = null;\n\nconst mapDispatchToProps = {\n    getMovies\n};\n\nconst connectToRedux = ReactRedux.connect(mapStateToProps, mapDispatchToProps);\nexport default connectToRedux(Form);\n","import './Card.css';\n\nimport React, { useEffect, useState } from 'react';\n\nimport Form from '../../molecules/Form/Form';\n\nconst Card = () => {\n    return <Form />;\n};\n\nexport default Card;\n","import React, { useState, useEffect } from \"react\";\n\ninterface IProps {\n    title: string;\n    releaseDate: string;\n    description: string;\n    showDetails: boolean;\n}\n\nconst CardFacing = (props: IProps) => {\n    // useEffect(() => {\n    //     Flag\n    //     ? setConditionalComponent(\n    //         <>\n    //             <span className=\"release-date\">{props.releaseDate}</span>\n    //             <p>\n    //                 {props.description}\n    //             </p>\n    //         </>\n    //     )\n    //     : setConditionalComponent(<></>)\n    // }, [Flag])\n\n    const Details = () => {\n        return (\n            <>\n                <span className=\"release-date\">{props.releaseDate}</span>\n                <p>{props.description}</p>\n            </>\n        );\n    };\n\n    return (\n        <div className=\"card-facing\">\n            <h1 className=\"title\">{props.title}</h1>\n            {props.showDetails ? <Details /> : null}\n        </div>\n    );\n};\n\nexport default CardFacing;\n","import React, { useState } from \"react\";\nimport \"./MovieItem.css\";\nimport CardFacing from \"../../atoms/CardFacing/CardFacing\";\n\ninterface IProps {\n    title: string;\n    description: string;\n    releaseDate: string;\n}\n\nexport default function MovieItem(props: IProps) {\n    const [style, setStyle] = useState({});\n    const [showDetails, setShowDetails] = useState(false);\n\n    const changeCard = () => {\n        setShowDetails(!showDetails);\n    };\n\n    return (\n        <div className=\"movieItem\" onClick={changeCard} style={style}>\n            <CardFacing\n                showDetails={showDetails}\n                title={props.title}\n                releaseDate={props.releaseDate}\n                description={props.description}\n            />\n        </div>\n    );\n}\n","import './MoviesList.css';\n\nimport React, { Component, useEffect } from 'react';\nimport * as ReactRedux from 'react-redux';\n\nimport MovieItem from '../../molecules/MovieItem/MovieItem';\n\ninterface IProps {\n    moviesReducer: {\n        movies: any;\n        isLoading: boolean;\n        errors: boolean;\n    };\n    surprise?: boolean;\n}\n\nclass MoviesList extends Component<IProps | any> {\n    render() {\n        console.log(this.props);\n        const movies = this.props.moviesReducer.movies.movies || [];\n        return (\n            <ul className=\"MoviesList\">\n                {this.props.surprise === true ? (\n                    <h1\n                        className=\"card-container\"\n                        style={{ textAlign: \"center\" }}\n                    >\n                        Enjoy the darkside\n                    </h1>\n                ) : movies.length === 0 ? (\n                    <h1\n                        className=\"card-container\"\n                        style={{ textAlign: \"center\" }}\n                    >\n                        Type something we can search for!\n                    </h1>\n                ) : (\n                    <h1\n                        className=\"card-container\"\n                        style={{ textAlign: \"center\" }}\n                    >\n                        Star Wars Movies\n                    </h1>\n                )}\n\n                {movies.map((sample: any) => {\n                    return (\n                        <MovieItem\n                            key={sample.episode_id}\n                            title={sample.title}\n                            releaseDate={sample.release_date}\n                            description={sample.opening_crawl}\n                        />\n                    );\n                })}\n            </ul>\n        );\n    }\n}\n\nconst mapStateToProps = (state: any) => ({\n    moviesReducer: state\n});\n\nconst mapDispatchToProps = null;\n\nconst connectToRedux = ReactRedux.connect(mapStateToProps, mapDispatchToProps);\nexport default connectToRedux(MoviesList);\n","import { useState } from 'react';\nimport React from 'react';\n\nimport Card from '../../organisms/Card/Card';\nimport MoviesList from '../../organisms/MoviesList/MoviesList';\n\nconst MainPage = () => {\n    return (\n        <div className=\"App\">\n            <section className=\"App-section\">\n                <Card />\n                <MoviesList />\n            </section>\n        </div>\n    );\n};\n\nexport default MainPage;\n","import React, { useEffect } from 'react';\nimport * as ReactRedux from 'react-redux';\n\nimport { getMovies } from '../../../redux/reducers/moviesReducer';\nimport MoviesList from '../../organisms/MoviesList/MoviesList';\n\nconst MoviesContent = (props: any) => {\n    const Styles = {\n        width: \"80%\"\n    };\n    useEffect(() => {\n        props.getMovies(\"\");\n    }, []);\n    return (\n        <section className={`card-container MoviesContent`} style={Styles}>\n            <MoviesList surprise={true} style={Styles} />\n        </section>\n    );\n};\n\nconst mapStateToProps = null;\n\nconst mapDispatchToProps = {\n    getMovies\n};\n\nconst connectToRedux = ReactRedux.connect(mapStateToProps, mapDispatchToProps);\nexport default connectToRedux(MoviesContent);\n","import './App.css';\n\nimport React, { Component } from 'react';\nimport * as ReactRedux from 'react-redux';\n\nimport configureStore from './redux/configureStore';\nimport Surprise from './shared/atoms/Surprise/Surprise';\nimport MainPage from './shared/pages/MainPage/MainPage';\nimport MoviesContent from './shared/pages/MoviesContent/MoviesContent';\n\nconst store = configureStore();\n\ninterface IState {\n    surprise: boolean;\n}\n\ninterface IProps {}\n\nclass App extends Component<IProps, IState> {\n    state: IState = {\n        surprise: false\n    };\n\n    getSurprise = () => {\n        if (this.state.surprise) this.setState({ surprise: false });\n        else this.setState({ surprise: true });\n    };\n\n    render() {\n        return (\n            <ReactRedux.Provider store={store}>\n                <div\n                    className={\n                        !this.state.surprise\n                            ? \"container -no-surprise\"\n                            : \"container -surprise\"\n                    }\n                >\n                    <Surprise\n                        className=\"button\"\n                        getAction={this.getSurprise}\n                        description={\n                            !this.state.surprise\n                                ? \"Turn to the dark side\"\n                                : \"I REGRET IT, TAKE ME BACK\"\n                        }\n                        isSurprise={this.state.surprise}\n                    />\n                </div>\n                {!this.state.surprise ? (\n                    <MainPage />\n                ) : (\n                    <MoviesContent isSearch={false} />\n                )}\n            </ReactRedux.Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}